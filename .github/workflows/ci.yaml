name: CI
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm-cache
      LLVM_CACHE: ${{ github.workspace }}/llvm-cache
      LLVM_VERSION: 19.1.7
      # TODO: remove when fixed: https://github.com/llvm/llvm-project/issues/52771
      ASAN_OPTIONS: alloc_dealloc_mismatch=0
    strategy:
      matrix:
        os: [ubuntu-22.04]
        preset: [unixlike-clang-debug, unixlike-clang-asan, unixlike-clang-tsan, unixlike-clang-ubsan, unixlike-clang-release]
        include:
          - os: ubuntu-22.04
            cores: 4
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # TODO: try removing after LLVM 19. Then try updating the Ubuntu version and enabling LTO.
      - name: Install libtinfo5
        run: sudo apt-get install libtinfo5

      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: ${{ env.LLVM_CACHE }}
          key: llvm-cache-${{ env.LLVM_VERSION }}

      - name: Setup LLVM
        uses: KyleMayes/install-llvm-action@v2.0.6
        with:
          version: ${{ env.LLVM_VERSION }}
          directory: ${{ env.LLVM_CACHE }}
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      - name: Setup CMake & Ninja
        uses: lukka/get-cmake@v3.31.6

      - name: Setup Mold
        uses: rui314/setup-mold@v1

      - name: Cache CPM
        uses: actions/cache@v4
        with:
          path: ${{ env.CPM_SOURCE_CACHE }}
          key: cpm-cache-${{ hashFiles('**/cpm-package-lock.cmake') }}

      - name: Configure
        run: cmake --preset unixlike-clang -DCMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE=OFF

      - name: Build
        run: cmake --build --preset ${{ matrix.preset }} --verbose

      - name: Test
        run: ctest --preset ${{ matrix.preset }} --parallel ${{ matrix.cores }}

      - name: Package
        if: endsWith(matrix.preset, '-release')
        run: cpack --preset ${{ matrix.preset }} --verbose -B "${GITHUB_WORKSPACE}" -DCPACK_THREADS=0

      - name: Archive
        if: endsWith(matrix.preset, '-release')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.preset }}-${{ github.sha }}
          path: '*.tar.zst'
          if-no-files-found: error
